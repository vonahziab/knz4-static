{
	// Place your Рабочая область knz snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	// Example:
	"Atom constructor": {
		"scope": "javascript,typescript,typescriptreact",
		"prefix": "newAtom",
		"body": [
			"atom({ key: '$1', default: $2 });"
		],
		"description": "Atom constructor"
	},
	"react ts comp": {
		"scope": "javascript,typescript,typescriptreact",
		"prefix": "rtc",
		"body": [
			"import React, { FC } from 'react';",
			"",
			"interface I${TM_FILENAME_BASE} {}",
			"",
			"const ${TM_FILENAME_BASE}: FC<I${TM_FILENAME_BASE}> = () => {",
			"    return (",
			"        <div>${TM_FILENAME_BASE}</div>",
			"    )",
			"}",
			"",
			"export default ${TM_FILENAME_BASE};"


		],
		"description": "comp constructor"
	},
	"react ts comp panel": {
		"scope": "javascript,typescript,typescriptreact",
		"prefix": "rtcp",
		"body": [
			"import { Group, Panel } from '@vkontakte/vkui';",
			"import { HeaderBack } from 'components';",
			"import { FC } from 'react';",
			"import { IPanelProps } from 'router/src/types/types';",
			"interface I${TM_FILENAME_BASE} extends IPanelProps {}",
			"",
			"const ${TM_FILENAME_BASE}: FC<I${TM_FILENAME_BASE}> = ({ router, id }) => {",
			"    return (",
			"        <Panel id={id}>",
			"            <HeaderBack goBack={router.goBack} text='${TM_FILENAME_BASE}' />",
			"            <Group>",
			"                <div>${TM_FILENAME_BASE}</div>",
			"            </Group>",
			"            {router.data.snackbar}",
			"        </Panel>",
			"    )",
			"}",
			"",
			"export default ${TM_FILENAME_BASE};"


		],
		"description": "panel constructor"
	},
	"react ts comp modal": {
		"scope": "javascript,typescript,typescriptreact",
		"prefix": "rtcm",
		"body": [
			"import { Icon24CrownOutline } from '@vkontakte/icons';",
			"import { Div, ModalPage, CardGrid, Card } from '@vkontakte/vkui';",
			"import { HeaderModal, IconHeader, IconModal, IconPreHeader } from 'modals/components';",
			"import { FC } from 'react';",
			"import { IModalProps } from 'router/src/types/types';",
			"interface I${TM_FILENAME_BASE} extends IModalProps {}",
			"",
			"const ${TM_FILENAME_BASE}: FC<I${TM_FILENAME_BASE}> = ({ router, id }) => {",
			"    return (",
			"        <ModalPage id={id}>",
			"            <HeaderModal router={router} />",
			"            <Div>",
			"                <IconModal icon={<Icon24CrownOutline height={90} width={90} fill='var(--accent)' />} />",
			"                <IconHeader text={`${TM_FILENAME_BASE}`} />",
			"                <IconPreHeader text={<></>} />",
			"                <div className='cardGridPadding0'>",
			"                    <CardGrid size='l' style={{ marginTop: 24, marginBottom: 8 }}>",
			"                    <Card mode='shadow'>",
			"                    <>${TM_FILENAME_BASE}</>",
			"                    </Card>",
			"                    </CardGrid>",
			"                </div>",
			"            </Div>",
			"            {router.data.snackbar}",
			"        </ModalPage>",
			"    )",
			"}",
			"",
			"export default ${TM_FILENAME_BASE};"


		],
		"description": "panel constructor"
	},
	"export deafault as": {
		"scope": "javascript,typescript,typescriptreact",
		"prefix": "exd",
		"body": [
			"export { default as $1 } from './$1'"
		],
		"description": "export default export default"
	},
	"esl": {
		"scope": "javascript,typescript,typescriptreact",
		"prefix": "esl",
		"body": [
			"// eslint-disable-line react-hooks/exhaustive-deps"
		],
		"description": "eslint ignore"
	},
	
}